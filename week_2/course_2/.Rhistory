for (i in 1:9) {
for (j in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
for (i in 1:9) {
for (j in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
for (j in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
cat(i);cat("*");cat(j);cat("=");cat(i*j);cat(" ")
for (j in 1:9) {
cat(i);cat("*");cat(j);cat("=");cat(i*j);cat(" ")
}
cat("\n")
for (i in 1:9) {
for (j in 1:9) {
cat(i);cat("*");cat(j);cat("=");cat(i*j);cat(" ")
}
cat("\n")
}
for (i in 1:9) {
for (j in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
for (i in 1:9) {
for (j in 1:9) {
cat(i);cat("*");cat(j);cat("=");cat(i*j);cat(" ")
}
cat("\n")
}
sample(10:100,size=10,replace=TRUE)
sample(10:100,size=10,replace=TRUE)
for (i in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
for (j in 1:9) {
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
for(iin 1:9) {
for(j in 1:9){
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
for(i in 1:9){
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
for(j in 1:9){
cat(i) ; cat(" * ") ; cat(j) ; cat(" = ") ; cat(i * j) ; cat(" ")
}
cat("\n")
cat(x) cat("*");cat(x);cat("=");cat(i*j);cat(" ")
for(x in 1:9){
cat(x) cat("*");cat(x);cat("=");cat(i*j);cat(" ")
for(x in 1:9){
cat(x);cat("*");cat(y);cat("=");cat(x*y);cat(" ")
for(y in 1:9){
cat(x);cat("*");cat(y);cat("=");cat(x*y);cat(" ")
}
cat("\n")
nums <- sample(10:100,size=10,replace=TRUE)
nums <- sample(10:100,size=10,replace=TRUE)
nums <- sample(10:100,size=10,replace=TRUE)
nums
(iris)
# 使用dim(), 回傳iris的列數與欄數
dim(iris)
head(iris)
# 使用tail() 回傳iris的後六列
tail(iris)
# 使用str()
str(iris)
# 使用summary() 查看iris敘述性統計、類別型資料概述。
summary(iris)
nums<-sample(10:100,size=10,replace=TRUE)
# 1.使用for loop 以及 if-else，印出大於50的偶數，並提示("偶數且大於50": 數字value)
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
(iris)
# 使用dim(), 回傳iris的列數與欄數
dim(iris)
head(iris)
# 使用tail() 回傳iris的後六列
tail(iris)
# 使用str()
str(iris)
# 使用summary() 查看iris敘述性統計、類別型資料概述。
summary(iris)
nums<-sample(10:100,size=10,replace=TRUE)
nums
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=1  8... 9x9=81)
for(x in 1:9){
for(y in 1:9){
cat(x);cat("*");cat(y);cat("=");cat(x*y);cat( )
}
cat("\n")
}
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=1  8... 9x9=81)
for(x in 1:9){
for(y in 1:9){
cat(x);cat("*");cat(y);cat("=");cat(x*y);cat(" ")
}
cat("\n")
}
%Y
if (((y%%4==0 and y%%100!=0 ) or (y%%400 ==0))
else
print("平年")
if (((y%%4==0 and y%%100!=0 ) or (y%%400 ==0))
else
print("平年")
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <- %Y
if (((y%%4==0 and y%%100!=0 ) or (y%%400 ==0))
else
print("平年")
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
if{((y%%4==0 & y%%100!=0 ) or (y%%400 ==0))
print("閏年")
}else{
print("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
if{((y%%4==0 & y%%100!=0 ) or (y%%400 ==0))
print("閏年")
}else{
print("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
if((y%%4==0 & y%%100!=0) or (y%%400 ==0)){
print("閏年")
} else{
print("平年")
}
if((y%%4==0 & y%%100!=0) or (y%%400 ==0)){
print("閏年")
} else{
print("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <-
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
print("閏年")
} else{
print("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <-nums
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
print("閏年")
} else{
print("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <-integer
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
print("閏年")
} else{
print("平年")
}
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
} else{
cat("平年")
}
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
} else{
cat("平年")
}
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
} else{
cat("平年")
}
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
cat("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <- integer
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
cat("平年")
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <- integer
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
cat("平年")
}
y <- integer
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
cat("平年")
}
.
(iris)
# 使用dim(), 回傳iris的列數與欄數
dim(iris)
head(iris)
# 使用tail() 回傳iris的後六列
tail(iris)
# 使用str()
str(iris)
# 使用summary() 查看iris敘述性統計、類別型資料概述。
summary(iris)
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=1  8... 9x9=81)
for(x in 1:9){
for(y in 1:9){
cat(x);cat("*");cat(y);cat("=");cat(x*y);cat(" ")
}
cat("\n")
}
nums<-sample(10:100,size=10,replace=TRUE)
nums
# 1.使用for loop 以及 if-else，印出大於50的偶數，並提示("偶數且大於50": 數字value)
# 2.特別規則：若數字為66，則提示("太66666666666了")並中止迴圈。
for(x in int){
if (x==66){
cat("太66666666666了")
break
}
else
}
# 請寫一段程式碼，能判斷輸入之西元年分 year 是否為閏年
y <- integer
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
print("平年")
}
y <- 2000
if((y%%4==0 & y%%100!=0) or(y%%400 ==0)){
cat("閏年")
}
else{
print("平年")
}
y <- 2000
if((y%%4==0 && y%%100!=0)||(y%%400 ==0)){
cat("閏年")
}
else{
cat("平年")
}
y <- 2000
if((y%%4==0 && y%%100!=0)||(y%%400 ==0)){
cat("閏年")
} else{
cat("平年")
}
y <- 1850
if((y%%4==0 && y%%100!=0)||(y%%400 ==0)){
cat("閏年")
} else{
cat("平年")
}
# 查看內建資料集: 鳶尾花(iris)資料集
iris
# 使用dim(), 回傳iris的列數與欄數
dim(iris)
# 使用head() 回傳iris的前六列
head(iris)
# 使用tail() 回傳iris的後六列
tail(iris)
# 使用str()
str(iris)
# 使用summary() 查看iris敘述性統計、類別型資料概述。
summary(iris)
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=18... 9x9=81)
m<-matrix(data=NA,nrow=9,ncol=9)
x<-1
y<-1
for(x in c(1:9)){
for(y in c(1:9)){
m[x,y]<-x*y
y<-y+1
}
x<-x+1
}
m
# 使用sample(), 產出10個介於10~100的整數，並存在變數 nums
n<-c(10:100)
nums<-sample(n,size=10)
# 查看nums
nums
# 1.使用for loop 以及 if-else，印出大於50的偶數，並提示("偶數且大於50": 數字value)
# 2.特別規則：若數字為66，則提示("太66666666666了")並中止迴圈。
even_number<-function(x){
i<-1
for(i in 1:10){
if(nums[i]==66){
print("太66666666666了")
break
}
else if((nums[i]%%2==0)&&(nums[i]>50)){
print(paste("偶數且大於50:",nums[i]))
}
else{
next
}
i<-i+1
}
}
even_number(nums)
for(i in 1){
year<-readline(prompt = "請輸入西元年分\n")
year_num<-as.numeric(year)
if (((year_num%%4==0)&&(year_num%%100!=0)) || (year_num%%400 ==0)){
print("閏年")
}
else{
print("平年")
}
}
for(i in 1){
year<-readline(prompt = "請輸入西元年分\n")
year_num<-as.numeric(year)
if (((year_num%%4==0)&&(year_num%%100!=0)) || (year_num%%400 ==0)){
print("閏年")
}
else{
print("平年")
}
}
setwd("~/GitHub/107-1-NTUCSX/week_2/course_2")
install.packages("readxl") # 如果先前已經安裝過就不用執行這行
library(readxl)
read_excel(test_data)
read.csv(test_data)
read.csv(test_data.csv)
library(readr)
test_data <- read_csv("~/GitHub/107-1RSampleCode/week_2/course_2/test_data.csv")
View(test_data)
### practice_2
### dataframe practice - II
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg/my.height.m^2
# Return my.bmi
return (my.bmi)
}
GetBmi(165, 55) # return 20.202002
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
'test_data.csv'
df <- read.table('test_data.csv', sep = ',',header = T,stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
View(test_data)
### practice_2
### dataframe practice - II
library(readr)
### practice_2
### dataframe practice - II
library(readr)
test_data <- read_csv("~/GitHub/107-1RSampleCode/week_2/course_2/test_data.csv")
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg/my.height.m^2
# Return my.bmi
return (my.bmi)
}
GetBmi(165, 55) # return 20.202002
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
'test_data.csv'
df <- read.table('test_data.csv', sep = ',',header = T,stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
raw = (data.frame(do.call(rbind,res_json$prods)))
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
raw = (data.frame(do.call(rbind,res_json$prods)))
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
library(httr)
url <- "https://tw.news.yahoo.com/"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
library(httr)
library(httr)
url <- "https://tw.news.yahoo.com/"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
install.packages("rvest")
library(rvest)
page.source <- read_html("https://en.wikipedia.org/wiki/R_(programming_language)")
version.block <- html_nodes(page.source, ".wikitable th+ td , th:nth-child(2) , .wikitable th:nth-child(1)")
head(version.block)
install.packages("rvest")
library(rvest)
page.source <- read_html("https://en.wikipedia.org/wiki/R_(programming_language)")
version.block <- html_nodes(page.source, ".wikitable th+ td , th:nth-child(2) , .wikitable th:nth-child(1)")
head(version.block)
content <- html_text(version.block)
head(content)
install.packages("rvest")
library(rvest)
page.source <- read_html("https://en.wikipedia.org/wiki/R_(programming_language)")
version.block <- html_nodes(page.source, ".wikitable th+ td , th:nth-child(2) , .wikitable th:nth-child(1)")
head(version.block)
content <- html_text(version.block)
head(content)
